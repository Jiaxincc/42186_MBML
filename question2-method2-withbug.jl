module facility_location

using JuMP
using Gurobi

function solve_facility_location()

    #------
    # DATA
    #------

    n = 10; # number of potential facility locations
    m = 67; # number of customers

    v = [480 288 270	240	300	260	200	140	160	140];
    f = [-20000 -32500 -15000 75000 56250 68750 62500 37500 60000 33750 ];
    h = [25	13	3	28	15	22	3	24	23	18	19	19	22	16	20	2	22	18	10	13	19	1	24	23	15	15	47	20	40	9	12	7	3	21	4	16	9	3	22	20	3	7	5	10	16	17	15	9	10	6	14	16	17	2	17	15	8	2	16	19	6	3	11	15	3	4	4];
    c = [
        22560	114623	6149	60908	106468	123513	19475	92704	9677	51694
19901	116869	4174	59007	106790	124902	24319	93394	10285	51168
27837	111965	12220	46521	97476	117519	37552	85183	23930	41533
36771	113277	28970	40013	93640	115261	54248	83711	38599	41662
55043	109472	49855	35807	85498	107087	75179	79360	59265	45570
52609	115808	50680	42289	91546	112980	75717	85764	58597	51642
59604	109872	55650	38112	85059	106237	80949	80196	64674	49414
59100	107416	53654	34938	82939	104334	78990	77540	63293	46003
59934	102163	51660	28929	78218	99856	76856	72085	62446	39947
62429	101241	54300	28980	76921	98431	79479	71332	65094	40881
71148	77327	52747	2800	56361	78029	73365	47122	66645	15391
71192	77178	52731	2746	56257	77916	73292	46980	66637	15202
69965	76439	50630	5158	56551	77977	70464	46466	64636	11754
77840	71971	59244	3934	50107	71887	79161	41683	73199	18110
82746	66930	63525	8903	44878	66660	82418	36662	77555	19788
82386	66985	63076	8616	45085	66847	81900	36706	77112	19246
92222	57705	72139	18710	35043	56854	89226	27663	86208	26065
94087	55491	73713	20796	32885	54677	90242	25481	87775	27267
100016	49695	79170	26995	26680	48485	94493	20120	93195	32266
109282	42959	88314	36001	18235	40057	102667	16208	102304	41286
123759	28685	101534	51619	2666	24148	112089	14415	115166	54722
126368	27418	104125	54117	2590	21914	114396	16547	117735	57330
127763	25525	105311	55845	2730	19990	114925	17036	118824	58667
130602	16578	107202	61551	9491	14137	113386	18271	120021	61971
141323	4559	117436	78620	28104	11727	116674	33997	128285	76273
145700	8950	121820	82327	30699	11427	120580	37798	132578	80463
145596	9000	121750	82920	31566	12533	120063	38340	132334	80794
145883	9267	122035	83100	31658	12463	120358	38530	132629	81029
143378	7334	119587	82025	31614	14028	117514	37394	129973	79310
142263	6012	118442	80700	30459	13537	116740	36069	128951	77992
142792	7019	118872	77653	25766	7733	119494	33268	130248	76359
111821	27421	88123	48136	18949	32632	94251	7126	100656	44666
98518	38260	74618	47411	36484	47485	77422	23228	85917	37904
104284	32487	80394	51339	32861	42070	82478	20839	91564	42980
110419	26401	86579	56780	30797	36852	87418	21129	97432	49215
109189	30188	86088	65075	41324	42920	82447	32549	95165	55117
77978	59626	54752	49330	59340	70291	54177	45369	64293	34238
75957	61860	52897	50211	61771	72650	51772	47780	62151	34840
14835	123715	14011	69239	116044	133002	19421	102306	80	60966
12949	125685	15375	70340	117723	134885	20805	104053	1916	62446
128	136845	23992	73932	125202	144464	33186	112447	14881	69142
126	136727	23886	73977	125183	144398	32942	112402	14666	69121
4386	141154	28305	77450	129213	148704	36067	116610	18642	73187
5609	142376	29515	78274	130223	149833	37129	117697	19862	74224
6230	142273	29465	76628	129029	149085	38935	116804	20986	73181
9150	144655	32021	77675	130517	150958	41808	118608	23911	74908
15003	149546	37969	88752	140108	158662	39019	127096	25815	84050
18791	137121	32591	87705	133663	148370	24652	119570	18522	79406
19280	134852	31223	86499	131726	146157	22376	117583	17210	77808
2977	134597	21991	73560	124011	142730	30089	110969	11887	67982
4739	136921	24367	71258	123449	143486	36858	111196	17814	67573
51976	158885	70934	125509	169371	172429	57468	155139	56873	117749
52439	158385	71240	125900	169292	171897	57514	155096	57174	118002
55921	160643	75233	129640	173340	173790	61720	159214	61179	122092
89416	67518	74295	89698	83418	81237	56395	73476	75200	74301
78834	73769	63405	83354	86051	87373	45944	74433	64472	67529
33438	112020	25331	75292	111748	123742	521	97411	19757	62860
97813	97908	97784	134075	121579	109302	72514	115765	89666	118172
73262	64755	50387	50956	64671	75622	48786	50630	59350	35317
71259	122614	77899	128107	141740	135507	53779	131214	66509	113676
71487	123900	78708	129354	143253	136710	54781	132789	67119	115027
71464	123447	78488	128980	142740	136281	54493	132266	66967	114613
89217	116174	95661	142586	139813	127234	70969	133136	84645	127092
52068	168254	73312	125890	175233	181821	63271	160973	59528	120366
25812	159130	48778	99133	150978	169250	46882	137963	36170	94914
36151	163692	58103	109900	160733	176102	51847	147080	44706	104896
118017	106922	125601	164919	132889	113355	100630	133828	114617	149311];


    #------
    # MODEL
    #------

    model = Model(Gurobi.Optimizer);

    @variable(model, x[1:n] >= 0, Bin);
    @variable(model, y[1:n,1:m] >= 0);

    @objective(model, Min, sum( f[j]*x[j] for j in 1:n) + sum( sum( h[i]*c[i,j]*y[i,j] for j in 1:n) for i = 1:m));

    @constraint(model,[i = 1:m], sum(y[i,j] for j in 1:n) == 1);
    @constraint(model,[i = 1:m, j = 1:n], y[i,j] <= x[j]);
    @constraint(model,[j = 1:n], sum(h[i]*y[i,j] for i in 1:m)<= v[j]);

    #-------
    # SOLVE
    #-------

    optimize!(model)

    println();
    for j = 1:n
        if (value(x[j]) == 1)
            println("facility ",j);
        end
    end

end

solve_facility_location();

end
